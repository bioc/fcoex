% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fcoex.R
\name{find_cbf_modules}
\alias{find_cbf_modules}
\alias{find_cbf_modules,fcoex-method}
\title{find_cbf_modules}
\usage{
find_cbf_modules(
  fc,
  n_genes_selected_in_first_step = NULL,
  FCBF_threshold = 0.1,
  verbose = TRUE,
  is_parallel = FALSE
)

\S4method{find_cbf_modules}{fcoex}(
  fc,
  n_genes_selected_in_first_step = NULL,
  FCBF_threshold = 0.1,
  verbose = TRUE,
  is_parallel = FALSE
)
}
\arguments{
\item{fc}{A fcoex object containing a discretized expression table}

\item{n_genes_selected_in_first_step}{Sets the number of genes to be selected in the first
part of the algorithm. If left unchanged, it defaults to NULL and the
minimum_su parameter is used.
Caution: it overrides the minimum_su parameter altogether.}

\item{FCBF_threshold}{A threshold for the minimum correlation (as
determined by symettrical uncertainty)
between each variable and the class used for wrapped FCBF function.
Defaults to 0.1.}

\item{verbose}{Adds verbosity. Defaults to TRUE}

\item{is_parallel}{Uses package parallel to paralleliza calculations.
Defaults to FALSE.}
}
\value{
Returns a list with the CBF modules found or a adjacency matrix of the graph
}
\description{
find_cbf_modules uses Symmetrical Uncertainty as a correlation measure
 and the FCBF algorithm to
1 - Filter the gene list by correlations to a class (Step 1)
and
2 - Determine soft thresholds for coexpression to genes predominantly
correlated to a class.
}
\examples{
library(SingleCellExperiment)
data("mini_pbmc3k")
targets <- colData(mini_pbmc3k)$clusters
exprs <- as.data.frame(assay(mini_pbmc3k, "logcounts"))
fc <- new_fcoex(exprs, targets)
fc <- discretize(fc)
fc <- find_cbf_modules(fc)
}
