data("mini_pbmc3k")
data('targets')
head(mini_pbmc3k)
colData(mini_pbmc3k)
mini_pbmc3k@colData
colData(mini_pbmc3k)
mini_pbmc3k@colData$clusters
library(SingleCellExperiment)
targets <- colData(mini_pbmc3k)$clusters
targets <- colData(mini_pbmc3k, clusters)
targets <- colData(mini_pbmc3k)$clusters
exprs <- assay(mini_pbmc3k, "logcounts")
fc <- new_fcoex(exprs, targets)
exprs <- as.data.frame(assay(mini_pbmc3k, "logcounts"))
fc <- new_fcoex(exprs, targets)
fc <- discretize(fc)
fc <- find_cbf_modules(fc)
fc <- plot_interactions(fc)
devtools::document()
#' @param fc Object of class \code{fcoex}
#'
#' @return A vector with color names.
#' @examples
#' data("mini_pbmc3k")
#' targets <- colData(mini_pbmc3k)$clusters
#' exprs <- as.data.frame(assay(mini_pbmc3k, "logcounts"))
#' fc <- new_fcoex(exprs, targets)
#' fc <- discretize(fc)
#' fc <- find_cbf_modules(fc)
mod_colors(fc)
fc@mod_colors
#' between each variable and the class used for wrapped FCBF function. Defaults to 0.1.
#' @param is_parallel Uses package parallel to paralleliza calculations. Defaults to FALSE.
#' @param verbose Adds verbosity. Defaults to TRUE
#' @param n_genes Sets the number of genes to be selected in the first part of the algorithm.
#' If left unchanged, it defaults to NULL and the thresh parameter is used.
#' Caution: it overrides the thresh parameter altogether.
#' @examples
#' data("mini_pbmc3k")
#' targets <- colData(mini_pbmc3k)$clusters
#' exprs <- as.data.frame(assay(mini_pbmc3k, "logcounts"))
fc <- new_fcoex(exprs, targets)
fc <- discretize(fc)
fc <- find_cbf_modules(fc)
fc@mod_colors
mod_gene_num(fc)
fc <- find_cbf_modules(fc)
mod_gene_num(fc)
nrow(module_genes(fc)
)
library(fcoex)
mod_gene_num(fc)
module_genes(fc)
nrow(module_genes(fc))
length(module_genes(fc))
#' Get the number of genes in modules in a fcoex object
#'
#' @param fc Object of class \code{fcoex}
#' @param module Default is NULL. If a character string designating a module is
#' given, the number of genes in that module is returned instead.
#' @examples
#' data("mini_pbmc3k")
#' targets <- colData(mini_pbmc3k)$clusters
#' exprs <- as.data.frame(assay(mini_pbmc3k, "logcounts"))
#' fc <- new_fcoex(exprs, targets)
#' fc <- discretize(fc)
#' fc <- find_cbf_modules(fc)
#' mod_gene_num(fc)
#' @return The number of genes in module(s)
#'
#' @rdname mod_gene_num
#' @export
setGeneric('mod_gene_num', function(fc, module = NULL) {
standardGeneric('mod_gene_num')
})
#' @rdname mod_gene_num
setMethod('mod_gene_num', signature(fc = 'fcoex'),
function(fc, module = NULL) {
if (!is.null(module)) {
if (!(all(module %in% mod_names(fc)))) {
stop("Module '", module, "' not in fcoex object!")
}
}
if (!length(module_genes(fc)) > 0) {
stop("No modules in fcoex object!")
}
if (!is.null(module)) {
mod_genes <- fc@module_list[[module]]
}
return(mod_genes)
})
fc
save(fc, "data/fc.rda")
save(list = fc, file = "data/fc.rda")
save(list = 'fc', file = "data/fc.rda")
devtools::document()
data(fc)
rm(fc)
data(fc)
data(fc)
rm(fc)
data(fc)
devtools::document()
devtools::document()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
data("fc")
rm(fc)
data("fc")
target <- colData(mini_pbmc3k)$clusters
data("mini_pbmc3k")
mini_pbmc3k
library(fcoex)
library(SingleCellExperiment)
data("mini_pbmc3k")
mini_pbmc3k
library(SingleCellExperiment, quietly = T)
library(fcoex, quietly = T)
library(SingleCellExperiment, quietly = T)
data("mini_pbmc3k")
mini_pbmc3k
library(fcoex, quietly = T)
library(SingleCellExperiment, quietly = T)
data("mini_pbmc3k")
devtools::install(.)
devtools::install()
library(fcoex, quietly = T)
library(SingleCellExperiment, quietly = T)
data("mini_pbmc3k")
mini_pbmc3k
target <- colData(mini_pbmc3k)$clusters
exprs <- as.data.frame(assay(sce, 'logcounts'))
exprs <- as.data.frame(assay(sce, 'logcounts'))
exprs <- as.data.frame(assay(mini_pbmc3k, 'logcounts'))
fc <- new_fcoex(data.frame(exprs),target)
fc <- discretize(fc, number_of_bins = 8)
fc <- find_cbf_modules(fc,n_genes = 200, verbose = FALSE, is_parallel = TRUE)
colnames(exprs)
rownames(exprs)
sce@colData <- cbind(colData(sce), mod_FCER1G = fc@mod_idents$FCER1G)
sce@colData <- cbind(colData(sce), mod_CD3D = fc@mod_idents$CD3D)
# Let's see the original clusters
plotReducedDim(sce, use_dimred="UMAP", colour_by="clusters")
# And let's see the population represented in the modules CD3D and FCER1G.
# Notably, the patterns are largely influenced by the patterns of header genes
plotReducedDim(sce, use_dimred="UMAP", colour_by="mod_FCER1G")
plotReducedDim(sce, use_dimred="UMAP", colour_by="FCER1G")
plotReducedDim(sce, use_dimred="UMAP", colour_by="mod_CD3D")
mini_pbmc3k@colData <- cbind(colData(mini_pbmc3k), mod_FCER1G = fc@mod_idents$FCER1G)
mini_pbmc3k@colData <- cbind(colData(mini_pbmc3k), mod_CD3D = fc@mod_idents$CD3D)
mini_pbmc3k@colData <- cbind(colData(mini_pbmc3k), mod_FCER1G = fc@mod_idents$FCER1G)
fc <- recluster(fc)
mini_pbmc3k@colData <- cbind(colData(mini_pbmc3k), mod_FCER1G = fc@mod_idents$FCER1G)
mini_pbmc3k@colData <- cbind(colData(mini_pbmc3k), mod_CD3D = fc@mod_idents$CD3D)
# Let's see the original clusters
plotReducedDim(sce, use_dimred="UMAP", colour_by="clusters")
?plotReducedDim
library(scater)
# Let's see the original clusters
plotReducedDim(sce, use_dimred="UMAP", colour_by="clusters")
# And let's see the population represented in the modules CD3D and FCER1G.
# Notably, the patterns are largely influenced by the patterns of header genes
plotReducedDim(sce, use_dimred="UMAP", colour_by="mod_FCER1G")
# Let's see the original clusters
plotReducedDim(sce, dimred="UMAP", colour_by="clusters")
# Let's see the original clusters
plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="clusters")
# And let's see the population represented in the modules CD3D and FCER1G.
# Notably, the patterns are largely influenced by the patterns of header genes
plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_FCER1G")
plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="FCER1G")
plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_CD3D")
plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="CD3D")
devtools::document
devtools::document()
BiocCheck::BiocCheck()
res <- list(genes = list(), desc = list())
#' Read a GMT file
#'
#' copied ipsis litteris from CEMiTool package.
#' @param fname GMT file name.
#' @return A list containing genes and description of each pathway
#' @examples
#' # Read example gmt file
gmt_fname <- system.file("extdata", "pathways.gmt", package = "CEMiTool")
fname <- gmt_fname
res <- list(genes = list(), desc = list())
gmt <- file(fname)
gmt_lines <- readLines(gmt)
close(gmt)
gmt_list <-
lapply(gmt_lines, function(x)
unlist(strsplit(x, split = "\t")))
gmt_names <- sapply(gmt_list, '[', 1)
gmt_names <- sapply(gmt_list, '[', 1)
gmt_names <- vapply(gmt_list, '[', 1)
gmt_names <- vapply(gmt_list, '[')
gmt_names <- vapply(gmt_list, '[', 1. "")
gmt_names <- sapply(gmt_list, '[', 1,FUN.VALUE = character(1))
gmt_names <- sapply(gmt_list, '[', 1,FUN.VALUE = character())
gmt_names <- sapply(gmt_list, '[', 1,FUN.VALUE = character)
gmt_names <- sapply(gmt_list, '[', 1, FUN.VALUE = character)
gmt_names <- sapply(gmt_list, '[', 1)
gmt_names <- Lapply(gmt_list, '[', 1)
gmt_names <- lapply(gmt_list, '[', 1)
gmt_desc <- lapply(gmt_list, '[', 2)
gmt_names <- sapply(gmt_list, '[', 1)
gmt_desc <- lapply(gmt_list, '[', 2)
gmt_names <- lapply(gmt_list, '[', 1)
gmt_desc2 <- lapply(gmt_list, '[', 2)
gmt_genes <- lapply(gmt_list, function(x) {
x[3:length(x)]
})
names(gmt_desc) <- names(gmt_genes) <- gmt_names
res <- do.call(rbind, lapply(names(gmt_genes),
function(n)
cbind.data.frame(
term = n,
gene = gmt_genes[[n]],
stringsAsFactors = FALSE
)))
gmt_names <- sapply(gmt_list, '[', 1)
gmt_desc2 <- lapply(gmt_list, '[', 2)
gmt_genes <- lapply(gmt_list, function(x) {
x[3:length(x)]
})
names(gmt_desc) <- names(gmt_genes) <- gmt_names
res <- do.call(rbind, lapply(names(gmt_genes),
function(n)
cbind.data.frame(
term = n,
gene = gmt_genes[[n]],
stringsAsFactors = FALSE
)))
res$term <- as.factor(res$term)
gmt_names <- lapply(gmt_list, '[', 1)
gmt_desc2 <- lapply(gmt_list, '[', 2)
gmt_genes <- lapply(gmt_list, function(x) {
x[3:length(x)]
})
names(gmt_desc) <- names(gmt_genes) <- gmt_names
res2 <- do.call(rbind, lapply(names(gmt_genes),
function(n)
cbind.data.frame(
term = n,
gene = gmt_genes[[n]],
stringsAsFactors = FALSE
)))
res2$term <- as.factor(res2$term)
res == res2
indentical(res, res2)
identical(res, res2)
devtools::document()
devtools::document()
devtools::document()
BiocCheck::BiocCheck()
source('~/side/fcoex/R/datasets.R')
BiocCheck::BiocCheck()
devtools::document()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
fc@mod_idents
class(fc@mod_idents)
devtools::document()
devtools::document()
BiocCheck::BiocCheck()
colData(mini_pbmc3k) <- cbind(colData(mini_pbmc3k), mod_FCER1G = idents(fc)$FCER1G)
BiocCheck::BiocCheck()
devtools::install()
library(fcoex)
devtools::install()
library(fcoex, quietly = TRUE)
library(SingleCellExperiment, quietly = TRUE)
data("mini_pbmc3k")
mini_pbmc3k
```{r Creating fcoex object}
fc <- discretize(fc, number_of_bins = 8)
fc <- find_cbf_modules(fc,n_genes = 200, verbose = FALSE, is_parallel = TRUE)
fc <- find_cbf_modules(fc,n_genes = 200, verbose = FALSE, is_parallel = TRUE)
fc <- get_nets(fc)
print(fc@interaction_plot)
# Example plot
print(show_plot(fc)[1])
devtools::install()
devtools::document()
devtools::install()
show_ora(fc)[1]
fc <- plot_ora(fc)
fc <- mod_ora(fc, gmt_in)
gmt_fname <- system.file("extdata", "pathways.gmt", package = "CEMiTool")
gmt_in <- read_gmt(gmt_fname)
fc <- mod_ora(fc, gmt_in)
fc <- mod_ora(fc, gmt_in)
fc <- plot_ora(fc)
fc <- plot_ora(fc)
show_ora(fc)[1]
show_ora(fc)[2]
print(show_ora(fc)[1])
print(show_ora(fc)[2])
show_ora(fc)
# And let's see the population represented in the modules CD3D and FCER1G.
# Notably, the patterns are largely influenced by the patterns of header genes
p1 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_FCER1G")
p2 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="FCER1G")
p3 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_CD3D")
p4 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="CD3D")
grid.arrange(p1, p2, p3, p4, nrow=2)
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow=2)
# And let's see the population represented in the modules CD3D and FCER1G.
# Notably, the patterns are largely influenced by the patterns of header genes
p1 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_FCER1G")
p2 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="FCER1G")
p3 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_CD3D")
library(scater)
# Let's see the original clusters
plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="clusters")
library(gridExtra)
# And let's see the population represented in the modules CD3D and FCER1G.
# Notably, the patterns are largely influenced by the patterns of header genes
p1 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_FCER1G")
p2 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="FCER1G")
p3 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_CD3D")
p4 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="CD3D")
grid.arrange(p1, p2, p3, p4, nrow=2)
# Example plot
p1 <- show_net(fc)[1]
p2 <- show_net(fc)[2]
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
BiocCheck::BiocCheck()
library(fcoex, quietly = TRUE)
devtools::document
devtools::document()
devtools::document()
install.packages('xaringan')
xaringan::infinite_moon_reader()
show_net(fc)[1]
```{r  Loading datasets, message=FALSE  }
show_net(fc)[1]
fc@coex_network_plot
fc@coex_network_plot$CD3D
fc@coex_network_plot["CD3D"]
fc@coex_network_plot[["CD3D"]]
fc@module_list
names(fc@module_list)
LS
devtools::document()
devtools::document()
mod_idents <- list()
expression_table <-
fc@expression[fc@module_list[[i]], ]
for (i in names(fc@module_list)) {
if (verbose){
message(print(i))
}
expression_table <-
fc@expression[fc@module_list[[i]], ]
d <-
dist(t(as.matrix(expression_table)), method = dist_method)
hc <- hclust(d, method = hclust_method)
idents <- as.factor(cutree(hc, k))
mod_idents[[i]] <- idents
}
i = "CD79A"
expression_table <-
fc@expression[fc@module_list[[i]], ]
d <-
dist(t(as.matrix(expression_table)), method = dist_method)
dist_method =- "ward.D2"
dist_method = "ward.D2"
d <-
dist(t(as.matrix(expression_table)), method = dist_method)
dist_method = "Ward.D2"
d <-
dist(t(as.matrix(expression_table)), method = dist_method)
hclust_method = "ward.D2",
dist_method = 'manhattan',
hclust_method = "ward.D2";
dist_method = 'manhattan',
hclust_method = "ward.D2";
dist_method = 'manhattan'
d <-
dist(t(as.matrix(expression_table)), method = dist_method)
hc <- hclust(d, method = hclust_method)
idents <- as.factor(cutree(hc, k))
k = 2
idents <- as.factor(cutree(hc, k))
table(fc@discretized_expression[,i])
table(fc@discretized_expression[i,])
table(fc@discretized_expression[1,])
table(fc@discretized_expression[,1])
fc@discretized_expression[,1]
fc@discretized_expression[1,]
fc@discretized_expression["CD79A",]
table(fc@discretized_expression["CD79A",])
table(as.character(fc@discretized_expression["CD79A",]))
table(as.character(fc@discretized_expression["CD79A",]), idents)
table(as.factor(fc@discretized_expression["CD79A",]), idents)
table((fc@discretized_expression["CD79A",]), idents)
fc@discretized_expression["CD79A",])
fc@discretized_expression["CD79A",]
levels(fc@discretized_expression["CD79A",])
levels(as.factor(fc@discretized_expression["CD79A",]))
as.factor(fc@discretized_expression["CD79A",])
as.factor(fc@discretized_expression["CD79A",])[1]
fc@discretized_expression["CD79A",][1]
t(fc@discretized_expression["CD79A",])
table(t(fc@discretized_expression["CD79A",]))
table(t(fc@discretized_expression[i,]))
table(t(fc@discretized_expression[i,]), idents)
max(table(t(fc@discretized_expression[i,]), idents))
table(t(fc@discretized_expression[i,]), idents) == 486
table(t(fc@discretized_expression[i,]), idents) == 496
a <- table(t(fc@discretized_expression[i,]), idents) == 496
table(fc@discretized_expression[,i])
table(t(fc@discretized_expression[i,]), idents)
prop.table(t(fc@discretized_expression[i,]), idents)
table(t(fc@discretized_expression[i,]), idents)
ifelse(idents == 2, "a", "b")
table(t(fc@discretized_expression[i,]), idents)
itable <- table(t(fc@discretized_expression[i,]), idents)
itable[itable == max(itable)]
itable[itable == max(itable[,1])]
itable[itable == max(itable[,2])]
itable[itable == max(itable[,1])]
itable == max(itable[,1]]
itable == max(itable[,1]
)
which(itable == max(itable[,1]))
rownams(itable)[which(itable == max(itable[,1]))]
rownames(itable)[which(itable == max(itable[,1]))]
ifelse(idents == 1, rownames(itable)[which(itable == max(itable[,1]))], rownames(itable)[which(itable == max(itable[,2]))])
ifelse(idents == 1, rownames(itable)[which(itable == max(itable[,1]))], "asd")
rownames(itable)[which(itable == max(itable[,2]))]
max(itable[,2])
itable == max(itable[,2])
which(itable == max(itable[,2]))
str(itable)
ifelse(which(itable == max(itable[,2])) == 3 , 1, 2)
[which(itable == max(itable[,1]))]
rownames(itable)[which(itable == max(itable[,2]))]
rownames(itable)[which(itable == max(itable[,1]))]
value_1 <- rownames(itable)[which(itable == max(itable[,1]))]
idents
fc@expression[i,][idents==1]
mean(fc@expression[i,][idents==1])
fc@expression[i,][idents==1]
as.numeric(fc@expression[i,][idents==1])
mean_1 <-  mean(as.numeric(fc@expression[i,][idents==1]))
mean_2 <-  mean(as.numeric(fc@expression[i,][idents==2]))
if (k == 2){
mean_1 <-  mean(as.numeric(fc@expression[i,][idents==1]))
mean_2 <-  mean(as.numeric(fc@expression[i,][idents==2]))
if (mean_1 > mean_2){
# The first cluster will be the header positive cluster
first = "HP"
} else {
# The first cluster will be the header negative cluster
first = "HN"
}
}
if (k == 2){
mean_1 <-  mean(as.numeric(fc@expression[i,][idents==1]))
mean_2 <-  mean(as.numeric(fc@expression[i,][idents==2]))
if (mean_1 > mean_2){
# The first cluster will be the header positive cluster
first = "HP"
second = "HN"
} else {
# The first cluster will be the header negative cluster
first = "HN"
second = "HP"
}
ifelse(idents == 1, first, second)
}
idents <- ifelse(idents == 1, first, second)
mod_idents[[i]] <- as.factor(idents)
for (i in names(fc@module_list)) {
if (verbose){
message(print(i))
}
expression_table <-
fc@expression[fc@module_list[[i]], ]
d <-
dist(t(as.matrix(expression_table)), method = dist_method)
hc <- hclust(d, method = hclust_method)
ifelse(which(itable == max(itable[,2])) == 3 , 1, 2)
idents <- as.factor(cutree(hc, k))
if (k == 2){
mean_1 <-  mean(as.numeric(fc@expression[i,][idents==1]))
mean_2 <-  mean(as.numeric(fc@expression[i,][idents==2]))
if (mean_1 > mean_2){
# The first cluster will be the header positive cluster
first = "HP"
second = "HN"
} else {
# The first cluster will be the header negative cluster
first = "HN"
second = "HP"
}
idents <- ifelse(idents == 1, first, second)
}
mod_idents[[i]] <- as.factor(idents)
}
devtools::document()
devtools::install()
devtools::install()
