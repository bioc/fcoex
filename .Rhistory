cbind.data.frame(
term = n,
gene = gmt_genes[[n]],
stringsAsFactors = FALSE
)))
res$term <- as.factor(res$term)
gmt_names <- lapply(gmt_list, '[', 1)
gmt_desc2 <- lapply(gmt_list, '[', 2)
gmt_genes <- lapply(gmt_list, function(x) {
x[3:length(x)]
})
names(gmt_desc) <- names(gmt_genes) <- gmt_names
res2 <- do.call(rbind, lapply(names(gmt_genes),
function(n)
cbind.data.frame(
term = n,
gene = gmt_genes[[n]],
stringsAsFactors = FALSE
)))
res2$term <- as.factor(res2$term)
res == res2
indentical(res, res2)
identical(res, res2)
devtools::document()
devtools::document()
devtools::document()
BiocCheck::BiocCheck()
source('~/side/fcoex/R/datasets.R')
BiocCheck::BiocCheck()
devtools::document()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
fc@mod_idents
class(fc@mod_idents)
devtools::document()
devtools::document()
BiocCheck::BiocCheck()
colData(mini_pbmc3k) <- cbind(colData(mini_pbmc3k), mod_FCER1G = idents(fc)$FCER1G)
BiocCheck::BiocCheck()
devtools::install()
library(fcoex)
devtools::install()
library(fcoex, quietly = TRUE)
library(SingleCellExperiment, quietly = TRUE)
data("mini_pbmc3k")
mini_pbmc3k
```{r Creating fcoex object}
fc <- discretize(fc, number_of_bins = 8)
fc <- find_cbf_modules(fc,n_genes = 200, verbose = FALSE, is_parallel = TRUE)
fc <- find_cbf_modules(fc,n_genes = 200, verbose = FALSE, is_parallel = TRUE)
fc <- get_nets(fc)
print(fc@interaction_plot)
# Example plot
print(show_plot(fc)[1])
devtools::install()
devtools::document()
devtools::install()
show_ora(fc)[1]
fc <- plot_ora(fc)
fc <- mod_ora(fc, gmt_in)
gmt_fname <- system.file("extdata", "pathways.gmt", package = "CEMiTool")
gmt_in <- read_gmt(gmt_fname)
fc <- mod_ora(fc, gmt_in)
fc <- mod_ora(fc, gmt_in)
fc <- plot_ora(fc)
fc <- plot_ora(fc)
show_ora(fc)[1]
show_ora(fc)[2]
print(show_ora(fc)[1])
print(show_ora(fc)[2])
show_ora(fc)
# And let's see the population represented in the modules CD3D and FCER1G.
# Notably, the patterns are largely influenced by the patterns of header genes
p1 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_FCER1G")
p2 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="FCER1G")
p3 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_CD3D")
p4 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="CD3D")
grid.arrange(p1, p2, p3, p4, nrow=2)
library(gridExtra)
grid.arrange(p1, p2, p3, p4, nrow=2)
# And let's see the population represented in the modules CD3D and FCER1G.
# Notably, the patterns are largely influenced by the patterns of header genes
p1 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_FCER1G")
p2 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="FCER1G")
p3 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_CD3D")
library(scater)
# Let's see the original clusters
plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="clusters")
library(gridExtra)
# And let's see the population represented in the modules CD3D and FCER1G.
# Notably, the patterns are largely influenced by the patterns of header genes
p1 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_FCER1G")
p2 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="FCER1G")
p3 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="mod_CD3D")
p4 <- plotReducedDim(mini_pbmc3k, dimred="UMAP", colour_by="CD3D")
grid.arrange(p1, p2, p3, p4, nrow=2)
# Example plot
p1 <- show_net(fc)[1]
p2 <- show_net(fc)[2]
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
BiocCheck::BiocCheck()
library(fcoex, quietly = TRUE)
devtools::document
devtools::document()
devtools::document()
install.packages('xaringan')
xaringan::infinite_moon_reader()
show_net(fc)[1]
```{r  Loading datasets, message=FALSE  }
show_net(fc)[1]
fc@coex_network_plot
fc@coex_network_plot$CD3D
fc@coex_network_plot["CD3D"]
fc@coex_network_plot[["CD3D"]]
fc@module_list
names(fc@module_list)
LS
devtools::document()
devtools::document()
mod_idents <- list()
expression_table <-
fc@expression[fc@module_list[[i]], ]
for (i in names(fc@module_list)) {
if (verbose){
message(print(i))
}
expression_table <-
fc@expression[fc@module_list[[i]], ]
d <-
dist(t(as.matrix(expression_table)), method = dist_method)
hc <- hclust(d, method = hclust_method)
idents <- as.factor(cutree(hc, k))
mod_idents[[i]] <- idents
}
i = "CD79A"
expression_table <-
fc@expression[fc@module_list[[i]], ]
d <-
dist(t(as.matrix(expression_table)), method = dist_method)
dist_method =- "ward.D2"
dist_method = "ward.D2"
d <-
dist(t(as.matrix(expression_table)), method = dist_method)
dist_method = "Ward.D2"
d <-
dist(t(as.matrix(expression_table)), method = dist_method)
hclust_method = "ward.D2",
dist_method = 'manhattan',
hclust_method = "ward.D2";
dist_method = 'manhattan',
hclust_method = "ward.D2";
dist_method = 'manhattan'
d <-
dist(t(as.matrix(expression_table)), method = dist_method)
hc <- hclust(d, method = hclust_method)
idents <- as.factor(cutree(hc, k))
k = 2
idents <- as.factor(cutree(hc, k))
table(fc@discretized_expression[,i])
table(fc@discretized_expression[i,])
table(fc@discretized_expression[1,])
table(fc@discretized_expression[,1])
fc@discretized_expression[,1]
fc@discretized_expression[1,]
fc@discretized_expression["CD79A",]
table(fc@discretized_expression["CD79A",])
table(as.character(fc@discretized_expression["CD79A",]))
table(as.character(fc@discretized_expression["CD79A",]), idents)
table(as.factor(fc@discretized_expression["CD79A",]), idents)
table((fc@discretized_expression["CD79A",]), idents)
fc@discretized_expression["CD79A",])
fc@discretized_expression["CD79A",]
levels(fc@discretized_expression["CD79A",])
levels(as.factor(fc@discretized_expression["CD79A",]))
as.factor(fc@discretized_expression["CD79A",])
as.factor(fc@discretized_expression["CD79A",])[1]
fc@discretized_expression["CD79A",][1]
t(fc@discretized_expression["CD79A",])
table(t(fc@discretized_expression["CD79A",]))
table(t(fc@discretized_expression[i,]))
table(t(fc@discretized_expression[i,]), idents)
max(table(t(fc@discretized_expression[i,]), idents))
table(t(fc@discretized_expression[i,]), idents) == 486
table(t(fc@discretized_expression[i,]), idents) == 496
a <- table(t(fc@discretized_expression[i,]), idents) == 496
table(fc@discretized_expression[,i])
table(t(fc@discretized_expression[i,]), idents)
prop.table(t(fc@discretized_expression[i,]), idents)
table(t(fc@discretized_expression[i,]), idents)
ifelse(idents == 2, "a", "b")
table(t(fc@discretized_expression[i,]), idents)
itable <- table(t(fc@discretized_expression[i,]), idents)
itable[itable == max(itable)]
itable[itable == max(itable[,1])]
itable[itable == max(itable[,2])]
itable[itable == max(itable[,1])]
itable == max(itable[,1]]
itable == max(itable[,1]
)
which(itable == max(itable[,1]))
rownams(itable)[which(itable == max(itable[,1]))]
rownames(itable)[which(itable == max(itable[,1]))]
ifelse(idents == 1, rownames(itable)[which(itable == max(itable[,1]))], rownames(itable)[which(itable == max(itable[,2]))])
ifelse(idents == 1, rownames(itable)[which(itable == max(itable[,1]))], "asd")
rownames(itable)[which(itable == max(itable[,2]))]
max(itable[,2])
itable == max(itable[,2])
which(itable == max(itable[,2]))
str(itable)
ifelse(which(itable == max(itable[,2])) == 3 , 1, 2)
[which(itable == max(itable[,1]))]
rownames(itable)[which(itable == max(itable[,2]))]
rownames(itable)[which(itable == max(itable[,1]))]
value_1 <- rownames(itable)[which(itable == max(itable[,1]))]
idents
fc@expression[i,][idents==1]
mean(fc@expression[i,][idents==1])
fc@expression[i,][idents==1]
as.numeric(fc@expression[i,][idents==1])
mean_1 <-  mean(as.numeric(fc@expression[i,][idents==1]))
mean_2 <-  mean(as.numeric(fc@expression[i,][idents==2]))
if (k == 2){
mean_1 <-  mean(as.numeric(fc@expression[i,][idents==1]))
mean_2 <-  mean(as.numeric(fc@expression[i,][idents==2]))
if (mean_1 > mean_2){
# The first cluster will be the header positive cluster
first = "HP"
} else {
# The first cluster will be the header negative cluster
first = "HN"
}
}
if (k == 2){
mean_1 <-  mean(as.numeric(fc@expression[i,][idents==1]))
mean_2 <-  mean(as.numeric(fc@expression[i,][idents==2]))
if (mean_1 > mean_2){
# The first cluster will be the header positive cluster
first = "HP"
second = "HN"
} else {
# The first cluster will be the header negative cluster
first = "HN"
second = "HP"
}
ifelse(idents == 1, first, second)
}
idents <- ifelse(idents == 1, first, second)
mod_idents[[i]] <- as.factor(idents)
for (i in names(fc@module_list)) {
if (verbose){
message(print(i))
}
expression_table <-
fc@expression[fc@module_list[[i]], ]
d <-
dist(t(as.matrix(expression_table)), method = dist_method)
hc <- hclust(d, method = hclust_method)
ifelse(which(itable == max(itable[,2])) == 3 , 1, 2)
idents <- as.factor(cutree(hc, k))
if (k == 2){
mean_1 <-  mean(as.numeric(fc@expression[i,][idents==1]))
mean_2 <-  mean(as.numeric(fc@expression[i,][idents==2]))
if (mean_1 > mean_2){
# The first cluster will be the header positive cluster
first = "HP"
second = "HN"
} else {
# The first cluster will be the header negative cluster
first = "HN"
second = "HP"
}
idents <- ifelse(idents == 1, first, second)
}
mod_idents[[i]] <- as.factor(idents)
}
devtools::document()
devtools::install()
devtools::install()
load("~/Documents/Projects/side/fcoex/data/mini_pbmc3k.rda")
save(mini_pbmc3k, file = "data/mini_pbmc3k.rda", compression_level = 9)
save(mini_pbmc3k, file = "data/mini_pbmc3k.rda", compress = "xz")
version('hdf5r')
version('hdf5')
version('rhdf5')
packageVersion("rhdf5r")
packageVersion("rhdf5")
packageVersion("HDF5")
target <- colData(mini_pbmc3k)
library(SingleCellExperiment, quietly = TRUE)
target <- SingleCellExperiment::colData(mini_pbmc3k)
target <- target$clusters
BiocManager::install(SingleCellExperiment)
BiocManager::install("SingleCellExperiment")
BiocCheck::BiocCheck()
colData(mini_pbmc3k) <- cbind(colData(mini_pbmc3k), mod_HLA-DRB1 = idents(fc)$HLA-DRB1)
colData(mini_pbmc3k) <- cbind(colData(mini_pbmc3k), mod_HLA\-DRB1 = idents(fc)$HLA-DRB1)
colData(mini_pbmc3k) <- cbind(colData(mini_pbmc3k), `mod_HLA-DRB1` = idents(fc)$HLA-DRB1)
colData(mini_pbmc3k) <- cbind(colData(mini_pbmc3k), `mod_HLA-DRB1` = idents(fc)$`HLA-DRB1`)
idents(fc)$`HLA-DRB1`
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
devtools::document
devtools::document()
mini_pbmc3k
library(SingleCellExperiment)
lg <- mini_pbmc3k@assays$logcounts
lg <- assay(mini_pbmc3k, "logcounts")
library(data.table)
fwrite(lg, "data/logcounts.tsv", sep = '\t')
lg <- as.data.frame(lg)
fwrite(lg, "data/logcounts.tsv", sep = '\t')
rd <- rowData(mini_pbmc3k)
rd <- as.data.frame(rd)
fwrite(lg, "data/rd.tsv", sep = '\t')
cd <- colData(mini_pbmc3k)
cd <- as.data.frame(cd)
fwrite(rg, "data/rd.tsv", sep = '\t')
rd <- rowData(mini_pbmc3k)
rd <- as.data.frame(rd)
fwrite(rd, "data/rd.tsv", sep = '\t')
cd <- colData(mini_pbmc3k)
cd <- as.data.frame(cd)
fwrite(cd, "data/cd.tsv", sep = '\t')
lg <- fread("data/logcounts.tsv")
rd <-fread("data/rd.tsv")
cd <- fread("data/cd.tsv")
mini_pbmc3k <- SingleCellExperiment(
logcounts = lg,
colData = cd
rowData = rd
)
mini_pbmc3k <- SingleCellExperiment(
logcounts = lg,
colData = cd,
rowData = rd
)
mini_pbmc3k <- SingleCellExperiment(
assays = list(logcounts = lg),
colData = cd,
rowData = rd
)
traceback()
mini_pbmc3k <- SingleCellExperiment(
assays = list(logcounts = lg))
mini_pbmc3k <- SingleCellExperiment(assays = list(logcounts = lg))
mini_pbmc3k <- SingleCellExperiment(assays = list(logcounts = as.matrix(lg)))
mini_pbmc3k <- SingleCellExperiment(assays = list(logcounts = as.matrix(lg)),
colData = cd,
rowData = rd)
#' Create a fcoex object
#'
#' @param expression Normalized gene expression table from single-cells
#'  \code{data.frame}.
#' @param target Original target classes for the cells (\code{factor}).
#' @return Object of class \code{fcoex}
#' @examples
#' # Create new fcoex object
#' library(SingleCellExperiment)
#' data("mini_pbmc3k")
targets <- colData(mini_pbmc3k)$clusters
exprs <- as.data.frame(assay(mini_pbmc3k, "logcounts"))
fc <- new_fcoex(exprs, targets)
library(fcoex)
fc <- new_fcoex(exprs, targets)
exprs <- as.data.frame(assay(mini_pbmc3k, "logcounts"))
fc <- new_fcoex(exprs, targets)
cd$clusters <- as.factor(cd$clusters)
mini_pbmc3k <- SingleCellExperiment(assays = list(logcounts = as.matrix(lg)),
colData = cd,
rowData = rd)
#' Create a fcoex object
#'
#' @param expression Normalized gene expression table from single-cells
#'  \code{data.frame}.
#' @param target Original target classes for the cells (\code{factor}).
#' @return Object of class \code{fcoex}
#' @examples
#' # Create new fcoex object
#' library(SingleCellExperiment)
#' data("mini_pbmc3k")
targets <- colData(mini_pbmc3k)$clusters
exprs <- as.data.frame(assay(mini_pbmc3k, "logcounts"))
fc <- new_fcoex(exprs, targets)
saveRDS(mini_pbmc3k, "data/mini_pbmc3k.rda", compress = "xz")
BiocCheck::BiocCheck()
View(mini_pbmc3k)
load("~/side/fcoex/data/mini_pbmc3k.rda")
load("~/side/fcoex/data/mini_pbmc3k.rda")
load("~/side/fcoex/data/mini_pbmc3k.rda")
library(SingleCellExperiment)
counts <- assay(mini_pbmc3k, "counts")
logcounts <-  as.data.frame(assay(mini_pbmc3k, "logcounts"))
cd <- as.data.frame(colData(mini_pbmc3k))
rd <- as.data.frame(rowData(mini_pbmc3k))
mini <- SingleCellExperiment(
assays = list(counts = counts, logcounts=logcounts),
colData = cd,
rowData = rd
)
mini
mini_pbmc3k <- mini
save(mini_pbmc3k, file = "data/mini_pbmc3k.rda")
load("~/side/fcoex/data/mini_pbmc3k.rda")
BiocCheck::BiocCheck()
devtools::check()
target <- SingleCellExperiment::colData(mini_pbmc3k)
data("mini_pbmc3k")
devtools::install()
library(fcoex, quietly = TRUE)
cat("This is the single cell object we will explore:")
data("mini_pbmc3k")
mini_pbmc3k
target <- SingleCellExperiment::colData(mini_pbmc3k)
target <- target$clusters
exprs <- as.data.frame(SummarizedExperiment::assay(mini_pbmc3k, 'logcounts'))
exprs <- as.data.frame(SummarizedExperiment::assay(mini_pbmc3k, 'logcounts'))
SummarizedExperiment::assay(mini_pbmc3k, 'logcounts')
mini_pbmc3k@assays
exprs <- SummarizedExperiment::assay(mini_pbmc3k, 'logcounts')
counts <- as.data.frame(assay(mini_pbmc3k, "counts"))
m <- mini_pbmc3k
load("~/side/fcoex/data/mini_pbmc3k.rda")
mini_pbmc3k
m
counts <- as.data.frame(assay(mini_pbmc3k, "counts"))
logcounts <-  as.data.frame(assay(mini_pbmc3k, "logcounts"))
View(logcounts)
logcounts[1:10,1:10]
counts <- as.data.frame(assay(mini_pbmc3k, "counts"))
logcounts <-  as.data.frame(assay(mini_pbmc3k, "logcounts"))
cd <- as.data.frame(colData(mini_pbmc3k))
rd <- as.data.frame(rowData(mini_pbmc3k))
mini <- SingleCellExperiment(
assays = list(counts = as.matrix(counts), logcounts=as.matrix(logcounts)),
colData = cd,
rowData = rd
)
counts2 <- as.data.frame(assay(mini, "counts"))
identical(counts, counts2)
logcounts2 <- as.data.frame(assay(mini, "logcounts"))
identical(logcounts, logcounts2)
library(scater)
mini <- runPCA(mini, subset_row=chosen.hvgs)
mini <- runPCA(mini)
reducedDimNames(mini)
mini <- runUMAP(mini
mini <- runUMAP(mini)
mini <- runUMAP(mini)
mini_pbmc3k <- mini
save(mini_pbmc3k, file = "data/mini_pbmc3k.rda")
devtools::check()
?head
?dist
library(devtools)
document()
check()
build(args = "--resave-data")
load("~/side/fcoex/data/fc.rda")
load("~/side/fcoex/data/mini_pbmc3k.rda")
save(fc,"data/fc.rda",compress = "xz")
save(fc,file = "data/fc.rda",compress = "xz")
save(mini_pbmc3k,file = "data/mini_pbmc3k.rda",compress = "xz")
check()
#' Get the number of genes in modules in a fcoex object
#'
#' @param fc Object of class \code{fcoex}
#' @param module Default is NULL. If a character string designating a
#' module is#' given, the number of genes in that module is returned instead.
#' @examples
#' data("fc")
mod_gene_num(fc)
!(all(module %in% mod_names(fc)))
!(all(NULL %in% mod_names(fc)))
!is.null(module)
module = NULL
!is.null(module)
mod_genes <- fc@module_list[[module]]
View(fc)
fc@module_list
document()
check()
document
document()
document()
document()
document()
check()
document()
check()
fc@coex_network_plot
get_nets(fc)
fc <- get_nets(fc)
fc@coex_network_plot
save(fc,"data/fc.rda",compress = "xz")
save(fc,file = "data/fc.rda",compress = "xz")
check()
# Due to a current problem with the FCBF package
#it is necessary to build it from source.
library(devtools)
# Due to a current problem with the FCBF package
#it is necessary to build it from source.
library(devtools)
install_github("lubianat/FCBF")
BiocCheck::BiocCheck()
check()
BiocManager::install("FCBF")
check
check()
